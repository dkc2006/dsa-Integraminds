Given an Integer Array A and and Window of Size K. Find The Max Element From Each Window

-------------------------------------------------------------------------------------

input    :  An Integer Array A and Integer K

output :  Max Length Of SubArray Of A in Which The

Example :

                              0    1    2   3   4   5    6   7   8    ---.> Index Number

                        A : [1    8   5   6   7   4    2   0   3]   ,   K : 4

 --------

 First Window

   ans : [ 8,8,7,7,7,4 ]



BruteForce

----------

                               T.C = N*K

Optimized [Sliding Window]

--------------------------

                   i-K [8-4=4]

                 i

                 0   1   2  3  4  5  6  7  8

            A : [1  8  5  6  7  4  2  0  3]   ,  K : 4

                    -------



            ans : []



            E/O : [8,8,7,7,7,4] N-K+1



                        Magic Box [Dequeue]   Inside Dequeue We Are Storing Index

                        -------------------



                        -------------------

                 1 ) if The Current Element is Less Than Previous Element  , We Have To  insert  The Current Element inside The Dequeue

                     because , The Current Element Can Be The answer For The Future Element.

                2 ) if The Current Element is Greater Than Previous Element  , We Have To Delete The Prevois ELements  in The Dequeue



                3) we Have To Delete The Previous Window Elements While Moving From One Window To Another Window ,

                     Because we Don't need Previous Window Elements.



                4) While Moving From One One Window To Another Window , We  Can Get The Prevoius Window Answer At Front Of Dequeue



CODE :

------



int[]  Sliding_Window_Max(int[])

{

 int[] res=new int[n-k+1];

ArrayDeque<Integer> dq=new ArrayDeque<Integer>;

//first Window

for(int i=0;i<K;i++)

{

              while(!dq.isEmpty() && A[i]>=A[dq.peekLast()])

 {

                 dq.removeLast();

 }



              dq.addLast(i);

 }

               res[0]=A[dq.peekFirst()];

//Process rest Of The Elements

for(int i=1;i<N;i++)

{

 // Remove The Elements From Window

                 while(!dq.isEmp() && dq.peekFirst()<=i-k)

  {

                       dq.removeFirst();

 }

 //Adding New Element

                  while(!dq.isEmpty() && A[i]>=A[dq.getLast()])

 {

                       dq.removeLast();

 }

                    dq.addLast(i);



                    res[i-k+1] = A[dq.peekFirst()];

 }

          return res;

}

 T.C = O(N) , S.C = O(N)

Parking Ice Cream Truck

Problem Description  [Please Read The Question ATleast 3 times]

-----------------------------------------------------------

Imagine you're an ice cream truck driver in a beachside town. The beach is divided into several sections, and each section has varying numbers of beachgoers wanting ice cream given by the array of integers A.

For simplicity, let's say the beach is divided into 8 sections. One day, you note down the number of potential customers in each section: [5, 12, 3, 4, 8, 10, 2, 7].

This means there are 5 people in the first section, 12 in the second, and so on.

You can only stop your truck in B consecutive sections at a time because of parking restrictions. To maximize sales, you want to park where the most customers are clustered together.

For all B consecutive sections, identify the busiest stretch to park your ice cream truck and serve the most customers. Return an array C, where C[i] is the busiest section in each of the B consecutive sections. Refer to the given example for clarity.

 NOTE :   if B > length of the array, return 1 element with the max of the array.

  Problem Constraints

1 <= |A|, B <= 10^6

 Input Format

The first argument given is the integer array A.

The second argument given is the integer B.

 Output Format

Return an array C, where C[i] is the maximum value from A[i] to A[i+B-1].

Example Input

 Input 1 :
 A = [1, 3, -1, -3, 5, 3, 6, 7]  , B = 3


Example Output

Output 1 :
 [3, 3, 5, 5, 6, 7]


Example Explanation

  Explanation 1 :


 Window position                |      Max
-----------------------------

 1     3    -1    -3    5   3   6    7    |       3
 1     3    -1    -3    5   3   6    7    |       3
 1     3    -1    -3    5   3   6    7    |       5
 1     3    -1    -3    5   3   6    7    |       5
 1     3    -1    -3    5   3   6    7    |       6
 1     3    -1    -3    5   3   6    7    |       7
public class Solution

{
 // DO NOT MODIFY THE LIST. IT IS READ ONLY
 public ArrayList<Integer> slidingMaximum(final List<Integer> A, int B)
 {


 }
}

CODE :

public class Solution

 {

    // DO NOT MODIFY THE LIST. IT IS READ ONLY

 public ArrayList<Integer> slidingMaximum(final List<Integer> A, int B)

  {

            int K = B;

            int n = A.size();

            ArrayList<Integer> ans = new ArrayList<>();

            Deque<Integer> dq = new ArrayDeque<>();

            // Handle the base case if K > n

                  if (K > n)

 {

                       int max = Integer.MIN_VALUE;

                       for (int i = 0; i < n; i++) '

  {

                            max = Math.max(max, A.get(i));

 }

                         ans.add(max);

   return ans;

 }

                // Build the deque for the first window

                      for (int i = 0; i < K; i++) '

 {

                              int ele = A.get(i);

                              // Remove all smaller elements from the back of the deque

                                   while (!dq.isEmpty() && A.get(dq.peekLast()) < ele)

 {

                                         dq.removeLast();

  }

                                     dq.addLast(i); // Store the index, not the value

 }



                          // Add the maximum of the first window

                              ans.add(A.get(dq.peekFirst()));

                          // Now process all windows from index K to n-1

                                for (int i = K; i < n; i++)

 {

                                         // Remove elements not within the window

                                            while (!dq.isEmpty() && dq.peekFirst() <= i - K)

 {

                                                  dq.removeFirst();

 }



                                            // Remove all elements smaller than the incoming element

                                                 while (!dq.isEmpty() && A.get(dq.peekLast()) < A.get(i))

 {

                                                              dq.removeLast();

 }



                                               // Add the current element's index to the deque

                                                     dq.addLast(i);



                                              // The maximum element is at the front of the deque

                                                     ans.add(A.get(dq.peekFirst()));

 }

 return ans;

  }

}